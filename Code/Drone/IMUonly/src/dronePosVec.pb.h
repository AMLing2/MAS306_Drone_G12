// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronePosVec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dronePosVec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dronePosVec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dronePosVec_2eproto;
namespace dronePosVec {
class dataTransfers;
class dataTransfersDefaultTypeInternal;
extern dataTransfersDefaultTypeInternal _dataTransfers_default_instance_;
class droneControl;
class droneControlDefaultTypeInternal;
extern droneControlDefaultTypeInternal _droneControl_default_instance_;
class dronePosition;
class dronePositionDefaultTypeInternal;
extern dronePositionDefaultTypeInternal _dronePosition_default_instance_;
}  // namespace dronePosVec
PROTOBUF_NAMESPACE_OPEN
template<> ::dronePosVec::dataTransfers* Arena::CreateMaybeMessage<::dronePosVec::dataTransfers>(Arena*);
template<> ::dronePosVec::droneControl* Arena::CreateMaybeMessage<::dronePosVec::droneControl>(Arena*);
template<> ::dronePosVec::dronePosition* Arena::CreateMaybeMessage<::dronePosVec::dronePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dronePosVec {

enum dataDevices : int {
  IMUonly = 0,
  CameraOnly = 1,
  KalmanFilter = 2,
  dataDevices_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  dataDevices_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool dataDevices_IsValid(int value);
constexpr dataDevices dataDevices_MIN = IMUonly;
constexpr dataDevices dataDevices_MAX = KalmanFilter;
constexpr int dataDevices_ARRAYSIZE = dataDevices_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* dataDevices_descriptor();
template<typename T>
inline const std::string& dataDevices_Name(T enum_t_value) {
  static_assert(::std::is_same<T, dataDevices>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function dataDevices_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    dataDevices_descriptor(), enum_t_value);
}
inline bool dataDevices_Parse(
    const std::string& name, dataDevices* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<dataDevices>(
    dataDevices_descriptor(), name, value);
}
enum transferType : int {
  timeSync = 0,
  socketInfo = 1,
  stateChange = 2,
  transferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  transferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool transferType_IsValid(int value);
constexpr transferType transferType_MIN = timeSync;
constexpr transferType transferType_MAX = stateChange;
constexpr int transferType_ARRAYSIZE = transferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transferType_descriptor();
template<typename T>
inline const std::string& transferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, transferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function transferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    transferType_descriptor(), enum_t_value);
}
inline bool transferType_Parse(
    const std::string& name, transferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<transferType>(
    transferType_descriptor(), name, value);
}
enum progName : int {
  server = 0,
  drone = 1,
  estimator = 2,
  arena = 3,
  camera = 4,
  rl = 5,
  progName_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  progName_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool progName_IsValid(int value);
constexpr progName progName_MIN = server;
constexpr progName progName_MAX = rl;
constexpr int progName_ARRAYSIZE = progName_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* progName_descriptor();
template<typename T>
inline const std::string& progName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, progName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function progName_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    progName_descriptor(), enum_t_value);
}
inline bool progName_Parse(
    const std::string& name, progName* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<progName>(
    progName_descriptor(), name, value);
}
// ===================================================================

class dronePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dronePosVec.dronePosition) */ {
 public:
  inline dronePosition() : dronePosition(nullptr) {};
  virtual ~dronePosition();

  dronePosition(const dronePosition& from);
  dronePosition(dronePosition&& from) noexcept
    : dronePosition() {
    *this = ::std::move(from);
  }

  inline dronePosition& operator=(const dronePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline dronePosition& operator=(dronePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dronePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dronePosition* internal_default_instance() {
    return reinterpret_cast<const dronePosition*>(
               &_dronePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dronePosition& a, dronePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(dronePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dronePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dronePosition* New() const final {
    return CreateMaybeMessage<dronePosition>(nullptr);
  }

  dronePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dronePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dronePosition& from);
  void MergeFrom(const dronePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dronePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dronePosVec.dronePosition";
  }
  protected:
  explicit dronePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dronePosVec_2eproto);
    return ::descriptor_table_dronePosVec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPositionDotFieldNumber = 3,
    kMatrixSizeFieldNumber = 4,
    kRotMatrixFieldNumber = 5,
    kRotMatrixDotFieldNumber = 6,
    kDeviceTypeFieldNumber = 1,
  };
  // repeated float position = 2 [packed = true];
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  float _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position() const;
  void _internal_add_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position();
  public:
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position();

  // repeated float positionDot = 3 [packed = true];
  int positiondot_size() const;
  private:
  int _internal_positiondot_size() const;
  public:
  void clear_positiondot();
  private:
  float _internal_positiondot(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_positiondot() const;
  void _internal_add_positiondot(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_positiondot();
  public:
  float positiondot(int index) const;
  void set_positiondot(int index, float value);
  void add_positiondot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      positiondot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_positiondot();

  // repeated uint32 matrixSize = 4 [packed = true];
  int matrixsize_size() const;
  private:
  int _internal_matrixsize_size() const;
  public:
  void clear_matrixsize();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrixsize(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_matrixsize() const;
  void _internal_add_matrixsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_matrixsize();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 matrixsize(int index) const;
  void set_matrixsize(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_matrixsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      matrixsize() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_matrixsize();

  // repeated float rotMatrix = 5 [packed = true];
  int rotmatrix_size() const;
  private:
  int _internal_rotmatrix_size() const;
  public:
  void clear_rotmatrix();
  private:
  float _internal_rotmatrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotmatrix() const;
  void _internal_add_rotmatrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotmatrix();
  public:
  float rotmatrix(int index) const;
  void set_rotmatrix(int index, float value);
  void add_rotmatrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotmatrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotmatrix();

  // repeated float rotMatrixDot = 6 [packed = true];
  int rotmatrixdot_size() const;
  private:
  int _internal_rotmatrixdot_size() const;
  public:
  void clear_rotmatrixdot();
  private:
  float _internal_rotmatrixdot(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotmatrixdot() const;
  void _internal_add_rotmatrixdot(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotmatrixdot();
  public:
  float rotmatrixdot(int index) const;
  void set_rotmatrixdot(int index, float value);
  void add_rotmatrixdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotmatrixdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotmatrixdot();

  // .dronePosVec.dataDevices deviceType = 1;
  void clear_devicetype();
  ::dronePosVec::dataDevices devicetype() const;
  void set_devicetype(::dronePosVec::dataDevices value);
  private:
  ::dronePosVec::dataDevices _internal_devicetype() const;
  void _internal_set_devicetype(::dronePosVec::dataDevices value);
  public:

  // @@protoc_insertion_point(class_scope:dronePosVec.dronePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > positiondot_;
  mutable std::atomic<int> _positiondot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > matrixsize_;
  mutable std::atomic<int> _matrixsize_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotmatrix_;
  mutable std::atomic<int> _rotmatrix_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotmatrixdot_;
  mutable std::atomic<int> _rotmatrixdot_cached_byte_size_;
  int devicetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dronePosVec_2eproto;
};
// -------------------------------------------------------------------

class droneControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dronePosVec.droneControl) */ {
 public:
  inline droneControl() : droneControl(nullptr) {};
  virtual ~droneControl();

  droneControl(const droneControl& from);
  droneControl(droneControl&& from) noexcept
    : droneControl() {
    *this = ::std::move(from);
  }

  inline droneControl& operator=(const droneControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline droneControl& operator=(droneControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const droneControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const droneControl* internal_default_instance() {
    return reinterpret_cast<const droneControl*>(
               &_droneControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(droneControl& a, droneControl& b) {
    a.Swap(&b);
  }
  inline void Swap(droneControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(droneControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline droneControl* New() const final {
    return CreateMaybeMessage<droneControl>(nullptr);
  }

  droneControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<droneControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const droneControl& from);
  void MergeFrom(const droneControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(droneControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dronePosVec.droneControl";
  }
  protected:
  explicit droneControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dronePosVec_2eproto);
    return ::descriptor_table_dronePosVec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorFLFieldNumber = 1,
    kMotorFRFieldNumber = 2,
    kMotorBLFieldNumber = 3,
    kMotorBRFieldNumber = 4,
  };
  // float motorFL = 1;
  void clear_motorfl();
  float motorfl() const;
  void set_motorfl(float value);
  private:
  float _internal_motorfl() const;
  void _internal_set_motorfl(float value);
  public:

  // float motorFR = 2;
  void clear_motorfr();
  float motorfr() const;
  void set_motorfr(float value);
  private:
  float _internal_motorfr() const;
  void _internal_set_motorfr(float value);
  public:

  // float motorBL = 3;
  void clear_motorbl();
  float motorbl() const;
  void set_motorbl(float value);
  private:
  float _internal_motorbl() const;
  void _internal_set_motorbl(float value);
  public:

  // float motorBR = 4;
  void clear_motorbr();
  float motorbr() const;
  void set_motorbr(float value);
  private:
  float _internal_motorbr() const;
  void _internal_set_motorbr(float value);
  public:

  // @@protoc_insertion_point(class_scope:dronePosVec.droneControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float motorfl_;
  float motorfr_;
  float motorbl_;
  float motorbr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dronePosVec_2eproto;
};
// -------------------------------------------------------------------

class dataTransfers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dronePosVec.dataTransfers) */ {
 public:
  inline dataTransfers() : dataTransfers(nullptr) {};
  virtual ~dataTransfers();

  dataTransfers(const dataTransfers& from);
  dataTransfers(dataTransfers&& from) noexcept
    : dataTransfers() {
    *this = ::std::move(from);
  }

  inline dataTransfers& operator=(const dataTransfers& from) {
    CopyFrom(from);
    return *this;
  }
  inline dataTransfers& operator=(dataTransfers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dataTransfers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dataTransfers* internal_default_instance() {
    return reinterpret_cast<const dataTransfers*>(
               &_dataTransfers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(dataTransfers& a, dataTransfers& b) {
    a.Swap(&b);
  }
  inline void Swap(dataTransfers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dataTransfers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dataTransfers* New() const final {
    return CreateMaybeMessage<dataTransfers>(nullptr);
  }

  dataTransfers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dataTransfers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dataTransfers& from);
  void MergeFrom(const dataTransfers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dataTransfers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dronePosVec.dataTransfers";
  }
  protected:
  explicit dataTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dronePosVec_2eproto);
    return ::descriptor_table_dronePosVec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kIPFieldNumber = 5,
    kSockaddrFieldNumber = 7,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTimeSyncNsFieldNumber = 4,
    kPortFieldNumber = 6,
    kSockaddrlenFieldNumber = 8,
    kSaFamilyFieldNumber = 9,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string IP = 5;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes sockaddr = 7;
  void clear_sockaddr();
  const std::string& sockaddr() const;
  void set_sockaddr(const std::string& value);
  void set_sockaddr(std::string&& value);
  void set_sockaddr(const char* value);
  void set_sockaddr(const void* value, size_t size);
  std::string* mutable_sockaddr();
  std::string* release_sockaddr();
  void set_allocated_sockaddr(std::string* sockaddr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sockaddr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sockaddr(
      std::string* sockaddr);
  private:
  const std::string& _internal_sockaddr() const;
  void _internal_set_sockaddr(const std::string& value);
  std::string* _internal_mutable_sockaddr();
  public:

  // .dronePosVec.progName ID = 1;
  void clear_id();
  ::dronePosVec::progName id() const;
  void set_id(::dronePosVec::progName value);
  private:
  ::dronePosVec::progName _internal_id() const;
  void _internal_set_id(::dronePosVec::progName value);
  public:

  // .dronePosVec.transferType type = 2;
  void clear_type();
  ::dronePosVec::transferType type() const;
  void set_type(::dronePosVec::transferType value);
  private:
  ::dronePosVec::transferType _internal_type() const;
  void _internal_set_type(::dronePosVec::transferType value);
  public:

  // int64 timeSync_ns = 4;
  void clear_timesync_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 timesync_ns() const;
  void set_timesync_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timesync_ns() const;
  void _internal_set_timesync_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 port = 6;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sockaddrlen = 8;
  void clear_sockaddrlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 sockaddrlen() const;
  void set_sockaddrlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sockaddrlen() const;
  void _internal_set_sockaddrlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sa_family = 9;
  void clear_sa_family();
  ::PROTOBUF_NAMESPACE_ID::uint32 sa_family() const;
  void set_sa_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sa_family() const;
  void _internal_set_sa_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dronePosVec.dataTransfers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sockaddr_;
  int id_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timesync_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sockaddrlen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sa_family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dronePosVec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dronePosition

// .dronePosVec.dataDevices deviceType = 1;
inline void dronePosition::clear_devicetype() {
  devicetype_ = 0;
}
inline ::dronePosVec::dataDevices dronePosition::_internal_devicetype() const {
  return static_cast< ::dronePosVec::dataDevices >(devicetype_);
}
inline ::dronePosVec::dataDevices dronePosition::devicetype() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.deviceType)
  return _internal_devicetype();
}
inline void dronePosition::_internal_set_devicetype(::dronePosVec::dataDevices value) {
  
  devicetype_ = value;
}
inline void dronePosition::set_devicetype(::dronePosVec::dataDevices value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.deviceType)
}

// repeated float position = 2 [packed = true];
inline int dronePosition::_internal_position_size() const {
  return position_.size();
}
inline int dronePosition::position_size() const {
  return _internal_position_size();
}
inline void dronePosition::clear_position() {
  position_.Clear();
}
inline float dronePosition::_internal_position(int index) const {
  return position_.Get(index);
}
inline float dronePosition::position(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.position)
  return _internal_position(index);
}
inline void dronePosition::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.position)
}
inline void dronePosition::_internal_add_position(float value) {
  position_.Add(value);
}
inline void dronePosition::add_position(float value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::position() const {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.position)
  return _internal_mutable_position();
}

// repeated float positionDot = 3 [packed = true];
inline int dronePosition::_internal_positiondot_size() const {
  return positiondot_.size();
}
inline int dronePosition::positiondot_size() const {
  return _internal_positiondot_size();
}
inline void dronePosition::clear_positiondot() {
  positiondot_.Clear();
}
inline float dronePosition::_internal_positiondot(int index) const {
  return positiondot_.Get(index);
}
inline float dronePosition::positiondot(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.positionDot)
  return _internal_positiondot(index);
}
inline void dronePosition::set_positiondot(int index, float value) {
  positiondot_.Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.positionDot)
}
inline void dronePosition::_internal_add_positiondot(float value) {
  positiondot_.Add(value);
}
inline void dronePosition::add_positiondot(float value) {
  _internal_add_positiondot(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.positionDot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::_internal_positiondot() const {
  return positiondot_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::positiondot() const {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.positionDot)
  return _internal_positiondot();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::_internal_mutable_positiondot() {
  return &positiondot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::mutable_positiondot() {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.positionDot)
  return _internal_mutable_positiondot();
}

// repeated uint32 matrixSize = 4 [packed = true];
inline int dronePosition::_internal_matrixsize_size() const {
  return matrixsize_.size();
}
inline int dronePosition::matrixsize_size() const {
  return _internal_matrixsize_size();
}
inline void dronePosition::clear_matrixsize() {
  matrixsize_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dronePosition::_internal_matrixsize(int index) const {
  return matrixsize_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dronePosition::matrixsize(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.matrixSize)
  return _internal_matrixsize(index);
}
inline void dronePosition::set_matrixsize(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  matrixsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.matrixSize)
}
inline void dronePosition::_internal_add_matrixsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  matrixsize_.Add(value);
}
inline void dronePosition::add_matrixsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_matrixsize(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.matrixSize)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
dronePosition::_internal_matrixsize() const {
  return matrixsize_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
dronePosition::matrixsize() const {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.matrixSize)
  return _internal_matrixsize();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
dronePosition::_internal_mutable_matrixsize() {
  return &matrixsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
dronePosition::mutable_matrixsize() {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.matrixSize)
  return _internal_mutable_matrixsize();
}

// repeated float rotMatrix = 5 [packed = true];
inline int dronePosition::_internal_rotmatrix_size() const {
  return rotmatrix_.size();
}
inline int dronePosition::rotmatrix_size() const {
  return _internal_rotmatrix_size();
}
inline void dronePosition::clear_rotmatrix() {
  rotmatrix_.Clear();
}
inline float dronePosition::_internal_rotmatrix(int index) const {
  return rotmatrix_.Get(index);
}
inline float dronePosition::rotmatrix(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.rotMatrix)
  return _internal_rotmatrix(index);
}
inline void dronePosition::set_rotmatrix(int index, float value) {
  rotmatrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.rotMatrix)
}
inline void dronePosition::_internal_add_rotmatrix(float value) {
  rotmatrix_.Add(value);
}
inline void dronePosition::add_rotmatrix(float value) {
  _internal_add_rotmatrix(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.rotMatrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::_internal_rotmatrix() const {
  return rotmatrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::rotmatrix() const {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.rotMatrix)
  return _internal_rotmatrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::_internal_mutable_rotmatrix() {
  return &rotmatrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::mutable_rotmatrix() {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.rotMatrix)
  return _internal_mutable_rotmatrix();
}

// repeated float rotMatrixDot = 6 [packed = true];
inline int dronePosition::_internal_rotmatrixdot_size() const {
  return rotmatrixdot_.size();
}
inline int dronePosition::rotmatrixdot_size() const {
  return _internal_rotmatrixdot_size();
}
inline void dronePosition::clear_rotmatrixdot() {
  rotmatrixdot_.Clear();
}
inline float dronePosition::_internal_rotmatrixdot(int index) const {
  return rotmatrixdot_.Get(index);
}
inline float dronePosition::rotmatrixdot(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.rotMatrixDot)
  return _internal_rotmatrixdot(index);
}
inline void dronePosition::set_rotmatrixdot(int index, float value) {
  rotmatrixdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.rotMatrixDot)
}
inline void dronePosition::_internal_add_rotmatrixdot(float value) {
  rotmatrixdot_.Add(value);
}
inline void dronePosition::add_rotmatrixdot(float value) {
  _internal_add_rotmatrixdot(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.rotMatrixDot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::_internal_rotmatrixdot() const {
  return rotmatrixdot_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
dronePosition::rotmatrixdot() const {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.rotMatrixDot)
  return _internal_rotmatrixdot();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::_internal_mutable_rotmatrixdot() {
  return &rotmatrixdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
dronePosition::mutable_rotmatrixdot() {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.rotMatrixDot)
  return _internal_mutable_rotmatrixdot();
}

// -------------------------------------------------------------------

// droneControl

// float motorFL = 1;
inline void droneControl::clear_motorfl() {
  motorfl_ = 0;
}
inline float droneControl::_internal_motorfl() const {
  return motorfl_;
}
inline float droneControl::motorfl() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorFL)
  return _internal_motorfl();
}
inline void droneControl::_internal_set_motorfl(float value) {
  
  motorfl_ = value;
}
inline void droneControl::set_motorfl(float value) {
  _internal_set_motorfl(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorFL)
}

// float motorFR = 2;
inline void droneControl::clear_motorfr() {
  motorfr_ = 0;
}
inline float droneControl::_internal_motorfr() const {
  return motorfr_;
}
inline float droneControl::motorfr() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorFR)
  return _internal_motorfr();
}
inline void droneControl::_internal_set_motorfr(float value) {
  
  motorfr_ = value;
}
inline void droneControl::set_motorfr(float value) {
  _internal_set_motorfr(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorFR)
}

// float motorBL = 3;
inline void droneControl::clear_motorbl() {
  motorbl_ = 0;
}
inline float droneControl::_internal_motorbl() const {
  return motorbl_;
}
inline float droneControl::motorbl() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorBL)
  return _internal_motorbl();
}
inline void droneControl::_internal_set_motorbl(float value) {
  
  motorbl_ = value;
}
inline void droneControl::set_motorbl(float value) {
  _internal_set_motorbl(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorBL)
}

// float motorBR = 4;
inline void droneControl::clear_motorbr() {
  motorbr_ = 0;
}
inline float droneControl::_internal_motorbr() const {
  return motorbr_;
}
inline float droneControl::motorbr() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorBR)
  return _internal_motorbr();
}
inline void droneControl::_internal_set_motorbr(float value) {
  
  motorbr_ = value;
}
inline void droneControl::set_motorbr(float value) {
  _internal_set_motorbr(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorBR)
}

// -------------------------------------------------------------------

// dataTransfers

// .dronePosVec.progName ID = 1;
inline void dataTransfers::clear_id() {
  id_ = 0;
}
inline ::dronePosVec::progName dataTransfers::_internal_id() const {
  return static_cast< ::dronePosVec::progName >(id_);
}
inline ::dronePosVec::progName dataTransfers::id() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.ID)
  return _internal_id();
}
inline void dataTransfers::_internal_set_id(::dronePosVec::progName value) {
  
  id_ = value;
}
inline void dataTransfers::set_id(::dronePosVec::progName value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.ID)
}

// .dronePosVec.transferType type = 2;
inline void dataTransfers::clear_type() {
  type_ = 0;
}
inline ::dronePosVec::transferType dataTransfers::_internal_type() const {
  return static_cast< ::dronePosVec::transferType >(type_);
}
inline ::dronePosVec::transferType dataTransfers::type() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.type)
  return _internal_type();
}
inline void dataTransfers::_internal_set_type(::dronePosVec::transferType value) {
  
  type_ = value;
}
inline void dataTransfers::set_type(::dronePosVec::transferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.type)
}

// string msg = 3;
inline void dataTransfers::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& dataTransfers::msg() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.msg)
  return _internal_msg();
}
inline void dataTransfers::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.msg)
}
inline std::string* dataTransfers::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:dronePosVec.dataTransfers.msg)
  return _internal_mutable_msg();
}
inline const std::string& dataTransfers::_internal_msg() const {
  return msg_.Get();
}
inline void dataTransfers::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dataTransfers::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dronePosVec.dataTransfers.msg)
}
inline void dataTransfers::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dronePosVec.dataTransfers.msg)
}
inline void dataTransfers::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dronePosVec.dataTransfers.msg)
}
inline std::string* dataTransfers::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dataTransfers::release_msg() {
  // @@protoc_insertion_point(field_release:dronePosVec.dataTransfers.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dataTransfers::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dronePosVec.dataTransfers.msg)
}
inline std::string* dataTransfers::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dronePosVec.dataTransfers.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void dataTransfers::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dronePosVec.dataTransfers.msg)
}

// int64 timeSync_ns = 4;
inline void dataTransfers::clear_timesync_ns() {
  timesync_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dataTransfers::_internal_timesync_ns() const {
  return timesync_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dataTransfers::timesync_ns() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.timeSync_ns)
  return _internal_timesync_ns();
}
inline void dataTransfers::_internal_set_timesync_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timesync_ns_ = value;
}
inline void dataTransfers::set_timesync_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timesync_ns(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.timeSync_ns)
}

// string IP = 5;
inline void dataTransfers::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& dataTransfers::ip() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.IP)
  return _internal_ip();
}
inline void dataTransfers::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.IP)
}
inline std::string* dataTransfers::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:dronePosVec.dataTransfers.IP)
  return _internal_mutable_ip();
}
inline const std::string& dataTransfers::_internal_ip() const {
  return ip_.Get();
}
inline void dataTransfers::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dataTransfers::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dronePosVec.dataTransfers.IP)
}
inline void dataTransfers::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dronePosVec.dataTransfers.IP)
}
inline void dataTransfers::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dronePosVec.dataTransfers.IP)
}
inline std::string* dataTransfers::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dataTransfers::release_ip() {
  // @@protoc_insertion_point(field_release:dronePosVec.dataTransfers.IP)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dataTransfers::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dronePosVec.dataTransfers.IP)
}
inline std::string* dataTransfers::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dronePosVec.dataTransfers.IP)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void dataTransfers::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dronePosVec.dataTransfers.IP)
}

// uint32 port = 6;
inline void dataTransfers::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::port() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.port)
  return _internal_port();
}
inline void dataTransfers::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void dataTransfers::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.port)
}

// bytes sockaddr = 7;
inline void dataTransfers::clear_sockaddr() {
  sockaddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& dataTransfers::sockaddr() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.sockaddr)
  return _internal_sockaddr();
}
inline void dataTransfers::set_sockaddr(const std::string& value) {
  _internal_set_sockaddr(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.sockaddr)
}
inline std::string* dataTransfers::mutable_sockaddr() {
  // @@protoc_insertion_point(field_mutable:dronePosVec.dataTransfers.sockaddr)
  return _internal_mutable_sockaddr();
}
inline const std::string& dataTransfers::_internal_sockaddr() const {
  return sockaddr_.Get();
}
inline void dataTransfers::_internal_set_sockaddr(const std::string& value) {
  
  sockaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dataTransfers::set_sockaddr(std::string&& value) {
  
  sockaddr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dronePosVec.dataTransfers.sockaddr)
}
inline void dataTransfers::set_sockaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sockaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dronePosVec.dataTransfers.sockaddr)
}
inline void dataTransfers::set_sockaddr(const void* value,
    size_t size) {
  
  sockaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dronePosVec.dataTransfers.sockaddr)
}
inline std::string* dataTransfers::_internal_mutable_sockaddr() {
  
  return sockaddr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dataTransfers::release_sockaddr() {
  // @@protoc_insertion_point(field_release:dronePosVec.dataTransfers.sockaddr)
  return sockaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dataTransfers::set_allocated_sockaddr(std::string* sockaddr) {
  if (sockaddr != nullptr) {
    
  } else {
    
  }
  sockaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sockaddr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dronePosVec.dataTransfers.sockaddr)
}
inline std::string* dataTransfers::unsafe_arena_release_sockaddr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dronePosVec.dataTransfers.sockaddr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sockaddr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void dataTransfers::unsafe_arena_set_allocated_sockaddr(
    std::string* sockaddr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sockaddr != nullptr) {
    
  } else {
    
  }
  sockaddr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sockaddr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dronePosVec.dataTransfers.sockaddr)
}

// uint32 sockaddrlen = 8;
inline void dataTransfers::clear_sockaddrlen() {
  sockaddrlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::_internal_sockaddrlen() const {
  return sockaddrlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::sockaddrlen() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.sockaddrlen)
  return _internal_sockaddrlen();
}
inline void dataTransfers::_internal_set_sockaddrlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sockaddrlen_ = value;
}
inline void dataTransfers::set_sockaddrlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sockaddrlen(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.sockaddrlen)
}

// uint32 sa_family = 9;
inline void dataTransfers::clear_sa_family() {
  sa_family_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::_internal_sa_family() const {
  return sa_family_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dataTransfers::sa_family() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.sa_family)
  return _internal_sa_family();
}
inline void dataTransfers::_internal_set_sa_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sa_family_ = value;
}
inline void dataTransfers::set_sa_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sa_family(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.sa_family)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dronePosVec

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dronePosVec::dataDevices> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dronePosVec::dataDevices>() {
  return ::dronePosVec::dataDevices_descriptor();
}
template <> struct is_proto_enum< ::dronePosVec::transferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dronePosVec::transferType>() {
  return ::dronePosVec::transferType_descriptor();
}
template <> struct is_proto_enum< ::dronePosVec::progName> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dronePosVec::progName>() {
  return ::dronePosVec::progName_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto
