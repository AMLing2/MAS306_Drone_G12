// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronePosVec.proto

#include "dronePosVec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace dronePosVec {
class dronePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dronePosition> _instance;
} _dronePosition_default_instance_;
class droneControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<droneControl> _instance;
} _droneControl_default_instance_;
class dataTransfersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dataTransfers> _instance;
} _dataTransfers_default_instance_;
}  // namespace dronePosVec
static void InitDefaultsscc_info_dataTransfers_dronePosVec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dronePosVec::_dataTransfers_default_instance_;
    new (ptr) ::dronePosVec::dataTransfers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dronePosVec::dataTransfers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dataTransfers_dronePosVec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dataTransfers_dronePosVec_2eproto}, {}};

static void InitDefaultsscc_info_droneControl_dronePosVec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dronePosVec::_droneControl_default_instance_;
    new (ptr) ::dronePosVec::droneControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dronePosVec::droneControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_droneControl_dronePosVec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_droneControl_dronePosVec_2eproto}, {}};

static void InitDefaultsscc_info_dronePosition_dronePosVec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dronePosVec::_dronePosition_default_instance_;
    new (ptr) ::dronePosVec::dronePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dronePosVec::dronePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dronePosition_dronePosVec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dronePosition_dronePosVec_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dronePosVec_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dronePosVec_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dronePosVec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dronePosVec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, devicetype_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, position_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, positiondot_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, matrixsize_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, rotmatrix_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, rotmatrixdot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, motorfl_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, motorfr_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, motorbl_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, motorbr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, id_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, type_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, msg_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, timesync_ns_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, ip_),
  PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dronePosVec::dronePosition)},
  { 11, -1, sizeof(::dronePosVec::droneControl)},
  { 20, -1, sizeof(::dronePosVec::dataTransfers)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dronePosVec::_dronePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dronePosVec::_droneControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dronePosVec::_dataTransfers_default_instance_),
};

const char descriptor_table_protodef_dronePosVec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021dronePosVec.proto\022\013dronePosVec\"\265\001\n\rdro"
  "nePosition\022,\n\ndeviceType\030\001 \001(\0162\030.dronePo"
  "sVec.dataDevices\022\024\n\010position\030\002 \003(\002B\002\020\001\022\027"
  "\n\013positionDot\030\003 \003(\002B\002\020\001\022\026\n\nmatrixSize\030\004 "
  "\003(\rB\002\020\001\022\025\n\trotMatrix\030\005 \003(\002B\002\020\001\022\030\n\014rotMat"
  "rixDot\030\006 \003(\002B\002\020\001\"R\n\014droneControl\022\017\n\007moto"
  "rFL\030\001 \001(\002\022\017\n\007motorFR\030\002 \001(\002\022\017\n\007motorBL\030\003 "
  "\001(\002\022\017\n\007motorBR\030\004 \001(\002\"\200\001\n\rdataTransfers\022\n"
  "\n\002ID\030\001 \001(\005\022\'\n\004type\030\003 \001(\0162\031.dronePosVec.t"
  "ransferType\022\013\n\003msg\030\004 \001(\t\022\023\n\013timeSync_ns\030"
  "\005 \001(\003\022\n\n\002IP\030\006 \001(\t\022\014\n\004port\030\007 \001(\r*<\n\013dataD"
  "evices\022\013\n\007IMUonly\020\000\022\016\n\nCameraOnly\020\001\022\020\n\014K"
  "almanFilter\020\002*=\n\014transferType\022\014\n\010timeSyn"
  "c\020\000\022\016\n\nsocketInfo\020\001\022\017\n\013stateChange\020\002b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dronePosVec_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dronePosVec_2eproto_sccs[3] = {
  &scc_info_dataTransfers_dronePosVec_2eproto.base,
  &scc_info_droneControl_dronePosVec_2eproto.base,
  &scc_info_dronePosition_dronePosVec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dronePosVec_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dronePosVec_2eproto = {
  false, false, descriptor_table_protodef_dronePosVec_2eproto, "dronePosVec.proto", 564,
  &descriptor_table_dronePosVec_2eproto_once, descriptor_table_dronePosVec_2eproto_sccs, descriptor_table_dronePosVec_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dronePosVec_2eproto::offsets,
  file_level_metadata_dronePosVec_2eproto, 3, file_level_enum_descriptors_dronePosVec_2eproto, file_level_service_descriptors_dronePosVec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dronePosVec_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dronePosVec_2eproto)), true);
namespace dronePosVec {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* dataDevices_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[0];
}
bool dataDevices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[1];
}
bool transferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void dronePosition::InitAsDefaultInstance() {
}
class dronePosition::_Internal {
 public:
};

dronePosition::dronePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  positiondot_(arena),
  matrixsize_(arena),
  rotmatrix_(arena),
  rotmatrixdot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dronePosition)
}
dronePosition::dronePosition(const dronePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      positiondot_(from.positiondot_),
      matrixsize_(from.matrixsize_),
      rotmatrix_(from.rotmatrix_),
      rotmatrixdot_(from.rotmatrixdot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicetype_ = from.devicetype_;
  // @@protoc_insertion_point(copy_constructor:dronePosVec.dronePosition)
}

void dronePosition::SharedCtor() {
  devicetype_ = 0;
}

dronePosition::~dronePosition() {
  // @@protoc_insertion_point(destructor:dronePosVec.dronePosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dronePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void dronePosition::ArenaDtor(void* object) {
  dronePosition* _this = reinterpret_cast< dronePosition* >(object);
  (void)_this;
}
void dronePosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dronePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dronePosition& dronePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dronePosition_dronePosVec_2eproto.base);
  return *internal_default_instance();
}


void dronePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dronePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  positiondot_.Clear();
  matrixsize_.Clear();
  rotmatrix_.Clear();
  rotmatrixdot_.Clear();
  devicetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dronePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dronePosVec.dataDevices deviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::dronePosVec::dataDevices>(val));
        } else goto handle_unusual;
        continue;
      // repeated float position = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float positionDot = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_positiondot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_positiondot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 matrixSize = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_matrixsize(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_matrixsize(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rotMatrix = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotmatrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_rotmatrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotMatrixDot = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotmatrixdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_rotmatrixdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dronePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dronePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dronePosVec.dataDevices deviceType = 1;
  if (this->devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_devicetype(), target);
  }

  // repeated float position = 2 [packed = true];
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated float positionDot = 3 [packed = true];
  if (this->_internal_positiondot_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_positiondot(), target);
  }

  // repeated uint32 matrixSize = 4 [packed = true];
  {
    int byte_size = _matrixsize_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_matrixsize(), byte_size, target);
    }
  }

  // repeated float rotMatrix = 5 [packed = true];
  if (this->_internal_rotmatrix_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_rotmatrix(), target);
  }

  // repeated float rotMatrixDot = 6 [packed = true];
  if (this->_internal_rotmatrixdot_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rotmatrixdot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dronePosition)
  return target;
}

size_t dronePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.dronePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float positionDot = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_positiondot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _positiondot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 matrixSize = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->matrixsize_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _matrixsize_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rotMatrix = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotmatrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotmatrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rotMatrixDot = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotmatrixdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotmatrixdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .dronePosVec.dataDevices deviceType = 1;
  if (this->devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dronePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dronePosVec.dronePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const dronePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dronePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dronePosVec.dronePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dronePosVec.dronePosition)
    MergeFrom(*source);
  }
}

void dronePosition::MergeFrom(const dronePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dronePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  positiondot_.MergeFrom(from.positiondot_);
  matrixsize_.MergeFrom(from.matrixsize_);
  rotmatrix_.MergeFrom(from.rotmatrix_);
  rotmatrixdot_.MergeFrom(from.rotmatrixdot_);
  if (from.devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
}

void dronePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dronePosVec.dronePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dronePosition::CopyFrom(const dronePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dronePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dronePosition::IsInitialized() const {
  return true;
}

void dronePosition::InternalSwap(dronePosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  positiondot_.InternalSwap(&other->positiondot_);
  matrixsize_.InternalSwap(&other->matrixsize_);
  rotmatrix_.InternalSwap(&other->rotmatrix_);
  rotmatrixdot_.InternalSwap(&other->rotmatrixdot_);
  swap(devicetype_, other->devicetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dronePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void droneControl::InitAsDefaultInstance() {
}
class droneControl::_Internal {
 public:
};

droneControl::droneControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.droneControl)
}
droneControl::droneControl(const droneControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&motorfl_, &from.motorfl_,
    static_cast<size_t>(reinterpret_cast<char*>(&motorbr_) -
    reinterpret_cast<char*>(&motorfl_)) + sizeof(motorbr_));
  // @@protoc_insertion_point(copy_constructor:dronePosVec.droneControl)
}

void droneControl::SharedCtor() {
  ::memset(&motorfl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorbr_) -
      reinterpret_cast<char*>(&motorfl_)) + sizeof(motorbr_));
}

droneControl::~droneControl() {
  // @@protoc_insertion_point(destructor:dronePosVec.droneControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void droneControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void droneControl::ArenaDtor(void* object) {
  droneControl* _this = reinterpret_cast< droneControl* >(object);
  (void)_this;
}
void droneControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void droneControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const droneControl& droneControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_droneControl_dronePosVec_2eproto.base);
  return *internal_default_instance();
}


void droneControl::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.droneControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&motorfl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorbr_) -
      reinterpret_cast<char*>(&motorfl_)) + sizeof(motorbr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* droneControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float motorFL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          motorfl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float motorFR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          motorfr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float motorBL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          motorbl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float motorBR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          motorbr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* droneControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.droneControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float motorFL = 1;
  if (!(this->motorfl() <= 0 && this->motorfl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_motorfl(), target);
  }

  // float motorFR = 2;
  if (!(this->motorfr() <= 0 && this->motorfr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_motorfr(), target);
  }

  // float motorBL = 3;
  if (!(this->motorbl() <= 0 && this->motorbl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_motorbl(), target);
  }

  // float motorBR = 4;
  if (!(this->motorbr() <= 0 && this->motorbr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_motorbr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.droneControl)
  return target;
}

size_t droneControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.droneControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float motorFL = 1;
  if (!(this->motorfl() <= 0 && this->motorfl() >= 0)) {
    total_size += 1 + 4;
  }

  // float motorFR = 2;
  if (!(this->motorfr() <= 0 && this->motorfr() >= 0)) {
    total_size += 1 + 4;
  }

  // float motorBL = 3;
  if (!(this->motorbl() <= 0 && this->motorbl() >= 0)) {
    total_size += 1 + 4;
  }

  // float motorBR = 4;
  if (!(this->motorbr() <= 0 && this->motorbr() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void droneControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dronePosVec.droneControl)
  GOOGLE_DCHECK_NE(&from, this);
  const droneControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<droneControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dronePosVec.droneControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dronePosVec.droneControl)
    MergeFrom(*source);
  }
}

void droneControl::MergeFrom(const droneControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.droneControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.motorfl() <= 0 && from.motorfl() >= 0)) {
    _internal_set_motorfl(from._internal_motorfl());
  }
  if (!(from.motorfr() <= 0 && from.motorfr() >= 0)) {
    _internal_set_motorfr(from._internal_motorfr());
  }
  if (!(from.motorbl() <= 0 && from.motorbl() >= 0)) {
    _internal_set_motorbl(from._internal_motorbl());
  }
  if (!(from.motorbr() <= 0 && from.motorbr() >= 0)) {
    _internal_set_motorbr(from._internal_motorbr());
  }
}

void droneControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dronePosVec.droneControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void droneControl::CopyFrom(const droneControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.droneControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool droneControl::IsInitialized() const {
  return true;
}

void droneControl::InternalSwap(droneControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(droneControl, motorbr_)
      + sizeof(droneControl::motorbr_)
      - PROTOBUF_FIELD_OFFSET(droneControl, motorfl_)>(
          reinterpret_cast<char*>(&motorfl_),
          reinterpret_cast<char*>(&other->motorfl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata droneControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dataTransfers::InitAsDefaultInstance() {
}
class dataTransfers::_Internal {
 public:
};

dataTransfers::dataTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dataTransfers)
}
dataTransfers::dataTransfers(const dataTransfers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:dronePosVec.dataTransfers)
}

void dataTransfers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dataTransfers_dronePosVec_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
}

dataTransfers::~dataTransfers() {
  // @@protoc_insertion_point(destructor:dronePosVec.dataTransfers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dataTransfers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void dataTransfers::ArenaDtor(void* object) {
  dataTransfers* _this = reinterpret_cast< dataTransfers* >(object);
  (void)_this;
}
void dataTransfers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dataTransfers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dataTransfers& dataTransfers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dataTransfers_dronePosVec_2eproto.base);
  return *internal_default_instance();
}


void dataTransfers::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dataTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dataTransfers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dronePosVec.transferType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::dronePosVec::transferType>(val));
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dronePosVec.dataTransfers.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeSync_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timesync_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dronePosVec.dataTransfers.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dataTransfers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dataTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .dronePosVec.transferType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dronePosVec.dataTransfers.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  // int64 timeSync_ns = 5;
  if (this->timesync_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timesync_ns(), target);
  }

  // string IP = 6;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dronePosVec.dataTransfers.IP");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ip(), target);
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dataTransfers)
  return target;
}

size_t dataTransfers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.dataTransfers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string IP = 6;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .dronePosVec.transferType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 timeSync_ns = 5;
  if (this->timesync_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timesync_ns());
  }

  // uint32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dataTransfers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dronePosVec.dataTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  const dataTransfers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dataTransfers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dronePosVec.dataTransfers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dronePosVec.dataTransfers)
    MergeFrom(*source);
  }
}

void dataTransfers::MergeFrom(const dataTransfers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dataTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.timesync_ns() != 0) {
    _internal_set_timesync_ns(from._internal_timesync_ns());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void dataTransfers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dronePosVec.dataTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataTransfers::CopyFrom(const dataTransfers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dataTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataTransfers::IsInitialized() const {
  return true;
}

void dataTransfers::InternalSwap(dataTransfers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dataTransfers, port_)
      + sizeof(dataTransfers::port_)
      - PROTOBUF_FIELD_OFFSET(dataTransfers, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dataTransfers::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dronePosVec
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dronePosVec::dronePosition* Arena::CreateMaybeMessage< ::dronePosVec::dronePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dronePosVec::dronePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::dronePosVec::droneControl* Arena::CreateMaybeMessage< ::dronePosVec::droneControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dronePosVec::droneControl >(arena);
}
template<> PROTOBUF_NOINLINE ::dronePosVec::dataTransfers* Arena::CreateMaybeMessage< ::dronePosVec::dataTransfers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dronePosVec::dataTransfers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
