// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronePosVec.proto
// Protobuf C++ Version: 5.26.1

#include "dronePosVec.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dronePosVec {

inline constexpr dronePosition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : position_{},
        positiondot_{},
        matrixsize_{},
        _matrixsize_cached_byte_size_{0},
        rotmatrix_{},
        rotmatrixdot_{},
        devicetype_{static_cast< ::dronePosVec::dataDevices >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR dronePosition::dronePosition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct dronePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dronePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dronePositionDefaultTypeInternal() {}
  union {
    dronePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dronePositionDefaultTypeInternal _dronePosition_default_instance_;

inline constexpr droneControl::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : motorfl_{0},
        motorfr_{0},
        motorbl_{0},
        motorbr_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR droneControl::droneControl(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct droneControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR droneControlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~droneControlDefaultTypeInternal() {}
  union {
    droneControl _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 droneControlDefaultTypeInternal _droneControl_default_instance_;

inline constexpr dataTransfers::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : msg_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        type_{static_cast< ::dronePosVec::transferType >(0)},
        timesync_ns_{::int64_t{0}},
        port_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR dataTransfers::dataTransfers(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct dataTransfersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dataTransfersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~dataTransfersDefaultTypeInternal() {}
  union {
    dataTransfers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dataTransfersDefaultTypeInternal _dataTransfers_default_instance_;
}  // namespace dronePosVec
static ::_pb::Metadata file_level_metadata_dronePosVec_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dronePosVec_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dronePosVec_2eproto = nullptr;
const ::uint32_t
    TableStruct_dronePosVec_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.devicetype_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.positiondot_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.matrixsize_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.rotmatrix_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dronePosition, _impl_.rotmatrixdot_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorfl_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorfr_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorbl_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::droneControl, _impl_.motorbr_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.msg_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.timesync_ns_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::dronePosVec::dataTransfers, _impl_.port_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::dronePosVec::dronePosition)},
        {14, -1, -1, sizeof(::dronePosVec::droneControl)},
        {26, -1, -1, sizeof(::dronePosVec::dataTransfers)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::dronePosVec::_dronePosition_default_instance_._instance,
    &::dronePosVec::_droneControl_default_instance_._instance,
    &::dronePosVec::_dataTransfers_default_instance_._instance,
};
const char descriptor_table_protodef_dronePosVec_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021dronePosVec.proto\022\013dronePosVec\"\265\001\n\rdro"
    "nePosition\022,\n\ndeviceType\030\001 \001(\0162\030.dronePo"
    "sVec.dataDevices\022\024\n\010position\030\002 \003(\002B\002\020\001\022\027"
    "\n\013positionDot\030\003 \003(\002B\002\020\001\022\026\n\nmatrixSize\030\004 "
    "\003(\rB\002\020\001\022\025\n\trotMatrix\030\005 \003(\002B\002\020\001\022\030\n\014rotMat"
    "rixDot\030\006 \003(\002B\002\020\001\"R\n\014droneControl\022\017\n\007moto"
    "rFL\030\001 \001(\002\022\017\n\007motorFR\030\002 \001(\002\022\017\n\007motorBL\030\003 "
    "\001(\002\022\017\n\007motorBR\030\004 \001(\002\"\200\001\n\rdataTransfers\022\n"
    "\n\002ID\030\001 \001(\005\022\'\n\004type\030\003 \001(\0162\031.dronePosVec.t"
    "ransferType\022\013\n\003msg\030\004 \001(\t\022\023\n\013timeSync_ns\030"
    "\005 \001(\003\022\n\n\002IP\030\006 \001(\t\022\014\n\004port\030\007 \001(\r*<\n\013dataD"
    "evices\022\013\n\007IMUonly\020\000\022\016\n\nCameraOnly\020\001\022\020\n\014K"
    "almanFilter\020\002*=\n\014transferType\022\014\n\010timeSyn"
    "c\020\000\022\016\n\nsocketInfo\020\001\022\017\n\013stateChange\020\002b\006pr"
    "oto3"
};
static ::absl::once_flag descriptor_table_dronePosVec_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dronePosVec_2eproto = {
    false,
    false,
    564,
    descriptor_table_protodef_dronePosVec_2eproto,
    "dronePosVec.proto",
    &descriptor_table_dronePosVec_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_dronePosVec_2eproto::offsets,
    file_level_metadata_dronePosVec_2eproto,
    file_level_enum_descriptors_dronePosVec_2eproto,
    file_level_service_descriptors_dronePosVec_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dronePosVec_2eproto_getter() {
  return &descriptor_table_dronePosVec_2eproto;
}
namespace dronePosVec {
const ::google::protobuf::EnumDescriptor* dataDevices_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t dataDevices_internal_data_[] = {
    196608u, 0u, };
bool dataDevices_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* transferType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_dronePosVec_2eproto);
  return file_level_enum_descriptors_dronePosVec_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t transferType_internal_data_[] = {
    196608u, 0u, };
bool transferType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class dronePosition::_Internal {
 public:
};

dronePosition::dronePosition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dronePosition)
}
inline PROTOBUF_NDEBUG_INLINE dronePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : position_{visibility, arena, from.position_},
        positiondot_{visibility, arena, from.positiondot_},
        matrixsize_{visibility, arena, from.matrixsize_},
        _matrixsize_cached_byte_size_{0},
        rotmatrix_{visibility, arena, from.rotmatrix_},
        rotmatrixdot_{visibility, arena, from.rotmatrixdot_},
        _cached_size_{0} {}

dronePosition::dronePosition(
    ::google::protobuf::Arena* arena,
    const dronePosition& from)
    : ::google::protobuf::Message(arena) {
  dronePosition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.devicetype_ = from._impl_.devicetype_;

  // @@protoc_insertion_point(copy_constructor:dronePosVec.dronePosition)
}
inline PROTOBUF_NDEBUG_INLINE dronePosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : position_{visibility, arena},
        positiondot_{visibility, arena},
        matrixsize_{visibility, arena},
        _matrixsize_cached_byte_size_{0},
        rotmatrix_{visibility, arena},
        rotmatrixdot_{visibility, arena},
        _cached_size_{0} {}

inline void dronePosition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.devicetype_ = {};
}
dronePosition::~dronePosition() {
  // @@protoc_insertion_point(destructor:dronePosVec.dronePosition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void dronePosition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
dronePosition::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(dronePosition, _impl_._cached_size_),
              false,
          },
          &dronePosition::MergeImpl,
          &dronePosition::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void dronePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dronePosition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_.Clear();
  _impl_.positiondot_.Clear();
  _impl_.matrixsize_.Clear();
  _impl_.rotmatrix_.Clear();
  _impl_.rotmatrixdot_.Clear();
  _impl_.devicetype_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* dronePosition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> dronePosition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_dronePosition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::dronePosition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .dronePosVec.dataDevices deviceType = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dronePosition, _impl_.devicetype_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.devicetype_)}},
    // repeated float position = 2 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.position_)}},
    // repeated float positionDot = 3 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.positiondot_)}},
    // repeated uint32 matrixSize = 4 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.matrixsize_)}},
    // repeated float rotMatrix = 5 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotmatrix_)}},
    // repeated float rotMatrixDot = 6 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotmatrixdot_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dronePosVec.dataDevices deviceType = 1;
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.devicetype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated float position = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.position_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float positionDot = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.positiondot_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated uint32 matrixSize = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.matrixsize_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated float rotMatrix = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotmatrix_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float rotMatrixDot = 6 [packed = true];
    {PROTOBUF_FIELD_OFFSET(dronePosition, _impl_.rotmatrixdot_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* dronePosition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dronePosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .dronePosVec.dataDevices deviceType = 1;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_devicetype(), target);
  }

  // repeated float position = 2 [packed = true];
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated float positionDot = 3 [packed = true];
  if (this->_internal_positiondot_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_positiondot(), target);
  }

  // repeated uint32 matrixSize = 4 [packed = true];
  {
    int byte_size = _impl_._matrixsize_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_matrixsize(), byte_size, target);
    }
  }

  // repeated float rotMatrix = 5 [packed = true];
  if (this->_internal_rotmatrix_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_rotmatrix(), target);
  }

  // repeated float rotMatrixDot = 6 [packed = true];
  if (this->_internal_rotmatrixdot_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rotmatrixdot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dronePosition)
  return target;
}

::size_t dronePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.dronePosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 2 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_position_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float positionDot = 3 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_positiondot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 matrixSize = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_matrixsize())
    ;
    _impl_._matrixsize_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float rotMatrix = 5 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_rotmatrix_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float rotMatrixDot = 6 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_rotmatrixdot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .dronePosVec.dataDevices deviceType = 1;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void dronePosition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<dronePosition*>(&to_msg);
  auto& from = static_cast<const dronePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dronePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_position()->MergeFrom(from._internal_position());
  _this->_internal_mutable_positiondot()->MergeFrom(from._internal_positiondot());
  _this->_internal_mutable_matrixsize()->MergeFrom(from._internal_matrixsize());
  _this->_internal_mutable_rotmatrix()->MergeFrom(from._internal_rotmatrix());
  _this->_internal_mutable_rotmatrixdot()->MergeFrom(from._internal_rotmatrixdot());
  if (from._internal_devicetype() != 0) {
    _this->_impl_.devicetype_ = from._impl_.devicetype_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void dronePosition::CopyFrom(const dronePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dronePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool dronePosition::IsInitialized() const {
  return true;
}

void dronePosition::InternalSwap(dronePosition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.position_.InternalSwap(&other->_impl_.position_);
  _impl_.positiondot_.InternalSwap(&other->_impl_.positiondot_);
  _impl_.matrixsize_.InternalSwap(&other->_impl_.matrixsize_);
  _impl_.rotmatrix_.InternalSwap(&other->_impl_.rotmatrix_);
  _impl_.rotmatrixdot_.InternalSwap(&other->_impl_.rotmatrixdot_);
  swap(_impl_.devicetype_, other->_impl_.devicetype_);
}

::google::protobuf::Metadata dronePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_dronePosVec_2eproto_getter,
                                   &descriptor_table_dronePosVec_2eproto_once,
                                   file_level_metadata_dronePosVec_2eproto[0]);
}
// ===================================================================

class droneControl::_Internal {
 public:
};

droneControl::droneControl(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.droneControl)
}
droneControl::droneControl(
    ::google::protobuf::Arena* arena, const droneControl& from)
    : droneControl(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE droneControl::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void droneControl::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, motorfl_),
           0,
           offsetof(Impl_, motorbr_) -
               offsetof(Impl_, motorfl_) +
               sizeof(Impl_::motorbr_));
}
droneControl::~droneControl() {
  // @@protoc_insertion_point(destructor:dronePosVec.droneControl)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void droneControl::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
droneControl::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(droneControl, _impl_._cached_size_),
              false,
          },
          &droneControl::MergeImpl,
          &droneControl::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void droneControl::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.droneControl)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.motorfl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.motorbr_) -
      reinterpret_cast<char*>(&_impl_.motorfl_)) + sizeof(_impl_.motorbr_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* droneControl::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> droneControl::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_droneControl_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::droneControl>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float motorBR = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbr_)}},
    // float motorFL = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_)}},
    // float motorFR = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfr_)}},
    // float motorBL = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbl_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float motorFL = 1;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorFR = 2;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorBL = 3;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float motorBR = 4;
    {PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* droneControl::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.droneControl)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float motorFL = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfl = this->_internal_motorfl();
  ::uint32_t raw_motorfl;
  memcpy(&raw_motorfl, &tmp_motorfl, sizeof(tmp_motorfl));
  if (raw_motorfl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_motorfl(), target);
  }

  // float motorFR = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfr = this->_internal_motorfr();
  ::uint32_t raw_motorfr;
  memcpy(&raw_motorfr, &tmp_motorfr, sizeof(tmp_motorfr));
  if (raw_motorfr != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_motorfr(), target);
  }

  // float motorBL = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbl = this->_internal_motorbl();
  ::uint32_t raw_motorbl;
  memcpy(&raw_motorbl, &tmp_motorbl, sizeof(tmp_motorbl));
  if (raw_motorbl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_motorbl(), target);
  }

  // float motorBR = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbr = this->_internal_motorbr();
  ::uint32_t raw_motorbr;
  memcpy(&raw_motorbr, &tmp_motorbr, sizeof(tmp_motorbr));
  if (raw_motorbr != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_motorbr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.droneControl)
  return target;
}

::size_t droneControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.droneControl)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float motorFL = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfl = this->_internal_motorfl();
  ::uint32_t raw_motorfl;
  memcpy(&raw_motorfl, &tmp_motorfl, sizeof(tmp_motorfl));
  if (raw_motorfl != 0) {
    total_size += 5;
  }

  // float motorFR = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfr = this->_internal_motorfr();
  ::uint32_t raw_motorfr;
  memcpy(&raw_motorfr, &tmp_motorfr, sizeof(tmp_motorfr));
  if (raw_motorfr != 0) {
    total_size += 5;
  }

  // float motorBL = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbl = this->_internal_motorbl();
  ::uint32_t raw_motorbl;
  memcpy(&raw_motorbl, &tmp_motorbl, sizeof(tmp_motorbl));
  if (raw_motorbl != 0) {
    total_size += 5;
  }

  // float motorBR = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbr = this->_internal_motorbr();
  ::uint32_t raw_motorbr;
  memcpy(&raw_motorbr, &tmp_motorbr, sizeof(tmp_motorbr));
  if (raw_motorbr != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void droneControl::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<droneControl*>(&to_msg);
  auto& from = static_cast<const droneControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.droneControl)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfl = from._internal_motorfl();
  ::uint32_t raw_motorfl;
  memcpy(&raw_motorfl, &tmp_motorfl, sizeof(tmp_motorfl));
  if (raw_motorfl != 0) {
    _this->_impl_.motorfl_ = from._impl_.motorfl_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorfr = from._internal_motorfr();
  ::uint32_t raw_motorfr;
  memcpy(&raw_motorfr, &tmp_motorfr, sizeof(tmp_motorfr));
  if (raw_motorfr != 0) {
    _this->_impl_.motorfr_ = from._impl_.motorfr_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbl = from._internal_motorbl();
  ::uint32_t raw_motorbl;
  memcpy(&raw_motorbl, &tmp_motorbl, sizeof(tmp_motorbl));
  if (raw_motorbl != 0) {
    _this->_impl_.motorbl_ = from._impl_.motorbl_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_motorbr = from._internal_motorbr();
  ::uint32_t raw_motorbr;
  memcpy(&raw_motorbr, &tmp_motorbr, sizeof(tmp_motorbr));
  if (raw_motorbr != 0) {
    _this->_impl_.motorbr_ = from._impl_.motorbr_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void droneControl::CopyFrom(const droneControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.droneControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool droneControl::IsInitialized() const {
  return true;
}

void droneControl::InternalSwap(droneControl* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorbr_)
      + sizeof(droneControl::_impl_.motorbr_)
      - PROTOBUF_FIELD_OFFSET(droneControl, _impl_.motorfl_)>(
          reinterpret_cast<char*>(&_impl_.motorfl_),
          reinterpret_cast<char*>(&other->_impl_.motorfl_));
}

::google::protobuf::Metadata droneControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_dronePosVec_2eproto_getter,
                                   &descriptor_table_dronePosVec_2eproto_once,
                                   file_level_metadata_dronePosVec_2eproto[1]);
}
// ===================================================================

class dataTransfers::_Internal {
 public:
};

dataTransfers::dataTransfers(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dronePosVec.dataTransfers)
}
inline PROTOBUF_NDEBUG_INLINE dataTransfers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : msg_(arena, from.msg_),
        ip_(arena, from.ip_),
        _cached_size_{0} {}

dataTransfers::dataTransfers(
    ::google::protobuf::Arena* arena,
    const dataTransfers& from)
    : ::google::protobuf::Message(arena) {
  dataTransfers* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, port_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::port_));

  // @@protoc_insertion_point(copy_constructor:dronePosVec.dataTransfers)
}
inline PROTOBUF_NDEBUG_INLINE dataTransfers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : msg_(arena),
        ip_(arena),
        _cached_size_{0} {}

inline void dataTransfers::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::port_));
}
dataTransfers::~dataTransfers() {
  // @@protoc_insertion_point(destructor:dronePosVec.dataTransfers)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void dataTransfers::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
dataTransfers::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_._cached_size_),
              false,
          },
          &dataTransfers::MergeImpl,
          &dataTransfers::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void dataTransfers::Clear() {
// @@protoc_insertion_point(message_clear_start:dronePosVec.dataTransfers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* dataTransfers::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 39, 2> dataTransfers::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967170,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_dataTransfers_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::dronePosVec::dataTransfers>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 ID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .dronePosVec.transferType type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.type_)}},
    // string msg = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.msg_)}},
    // int64 timeSync_ns = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(dataTransfers, _impl_.timesync_ns_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.timesync_ns_)}},
    // string IP = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.ip_)}},
    // uint32 port = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(dataTransfers, _impl_.port_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 ID = 1;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .dronePosVec.transferType type = 3;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string msg = 4;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timeSync_ns = 5;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.timesync_ns_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string IP = 6;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 7;
    {PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\31\0\0\3\0\2\0\0"
    "dronePosVec.dataTransfers"
    "msg"
    "IP"
  }},
};

::uint8_t* dataTransfers::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dronePosVec.dataTransfers)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // .dronePosVec.transferType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dronePosVec.dataTransfers.msg");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 timeSync_ns = 5;
  if (this->_internal_timesync_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_timesync_ns(), target);
  }

  // string IP = 6;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dronePosVec.dataTransfers.IP");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 port = 7;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dronePosVec.dataTransfers)
  return target;
}

::size_t dataTransfers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dronePosVec.dataTransfers)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // string IP = 6;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .dronePosVec.transferType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 timeSync_ns = 5;
  if (this->_internal_timesync_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timesync_ns());
  }

  // uint32 port = 7;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void dataTransfers::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<dataTransfers*>(&to_msg);
  auto& from = static_cast<const dataTransfers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dronePosVec.dataTransfers)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_timesync_ns() != 0) {
    _this->_impl_.timesync_ns_ = from._impl_.timesync_ns_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void dataTransfers::CopyFrom(const dataTransfers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dronePosVec.dataTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool dataTransfers::IsInitialized() const {
  return true;
}

void dataTransfers::InternalSwap(dataTransfers* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, &other->_impl_.msg_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.port_)
      + sizeof(dataTransfers::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(dataTransfers, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata dataTransfers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_dronePosVec_2eproto_getter,
                                   &descriptor_table_dronePosVec_2eproto_once,
                                   file_level_metadata_dronePosVec_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace dronePosVec
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_dronePosVec_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
