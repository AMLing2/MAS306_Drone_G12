// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dronePosVec.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dronePosVec_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dronePosVec_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dronePosVec_2eproto;
namespace dronePosVec {
class dataTransfers;
struct dataTransfersDefaultTypeInternal;
extern dataTransfersDefaultTypeInternal _dataTransfers_default_instance_;
class droneControl;
struct droneControlDefaultTypeInternal;
extern droneControlDefaultTypeInternal _droneControl_default_instance_;
class dronePosition;
struct dronePositionDefaultTypeInternal;
extern dronePositionDefaultTypeInternal _dronePosition_default_instance_;
}  // namespace dronePosVec
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dronePosVec {
enum dataDevices : int {
  IMUonly = 0,
  CameraOnly = 1,
  KalmanFilter = 2,
  dataDevices_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  dataDevices_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool dataDevices_IsValid(int value);
extern const uint32_t dataDevices_internal_data_[];
constexpr dataDevices dataDevices_MIN = static_cast<dataDevices>(0);
constexpr dataDevices dataDevices_MAX = static_cast<dataDevices>(2);
constexpr int dataDevices_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
dataDevices_descriptor();
template <typename T>
const std::string& dataDevices_Name(T value) {
  static_assert(std::is_same<T, dataDevices>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to dataDevices_Name().");
  return dataDevices_Name(static_cast<dataDevices>(value));
}
template <>
inline const std::string& dataDevices_Name(dataDevices value) {
  return ::google::protobuf::internal::NameOfDenseEnum<dataDevices_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool dataDevices_Parse(absl::string_view name, dataDevices* value) {
  return ::google::protobuf::internal::ParseNamedEnum<dataDevices>(
      dataDevices_descriptor(), name, value);
}
enum transferType : int {
  timeSync = 0,
  socketInfo = 1,
  stateChange = 2,
  transferType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  transferType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool transferType_IsValid(int value);
extern const uint32_t transferType_internal_data_[];
constexpr transferType transferType_MIN = static_cast<transferType>(0);
constexpr transferType transferType_MAX = static_cast<transferType>(2);
constexpr int transferType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
transferType_descriptor();
template <typename T>
const std::string& transferType_Name(T value) {
  static_assert(std::is_same<T, transferType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to transferType_Name().");
  return transferType_Name(static_cast<transferType>(value));
}
template <>
inline const std::string& transferType_Name(transferType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<transferType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool transferType_Parse(absl::string_view name, transferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<transferType>(
      transferType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class dronePosition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dronePosVec.dronePosition) */ {
 public:
  inline dronePosition() : dronePosition(nullptr) {}
  ~dronePosition() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR dronePosition(
      ::google::protobuf::internal::ConstantInitialized);

  inline dronePosition(const dronePosition& from) : dronePosition(nullptr, from) {}
  inline dronePosition(dronePosition&& from) noexcept
      : dronePosition(nullptr, std::move(from)) {}
  inline dronePosition& operator=(const dronePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline dronePosition& operator=(dronePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dronePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const dronePosition* internal_default_instance() {
    return reinterpret_cast<const dronePosition*>(
        &_dronePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(dronePosition& a, dronePosition& b) { a.Swap(&b); }
  inline void Swap(dronePosition* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dronePosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dronePosition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<dronePosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const dronePosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const dronePosition& from) { dronePosition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(dronePosition* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dronePosVec.dronePosition"; }

 protected:
  explicit dronePosition(::google::protobuf::Arena* arena);
  dronePosition(::google::protobuf::Arena* arena, const dronePosition& from);
  dronePosition(::google::protobuf::Arena* arena, dronePosition&& from) noexcept
      : dronePosition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 2,
    kPositionDotFieldNumber = 3,
    kMatrixSizeFieldNumber = 4,
    kRotMatrixFieldNumber = 5,
    kRotMatrixDotFieldNumber = 6,
    kDeviceTypeFieldNumber = 1,
  };
  // repeated float position = 2 [packed = true];
  int position_size() const;
  private:
  int _internal_position_size() const;

  public:
  void clear_position() ;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField<float>& position() const;
  ::google::protobuf::RepeatedField<float>* mutable_position();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_position() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_position();

  public:
  // repeated float positionDot = 3 [packed = true];
  int positiondot_size() const;
  private:
  int _internal_positiondot_size() const;

  public:
  void clear_positiondot() ;
  float positiondot(int index) const;
  void set_positiondot(int index, float value);
  void add_positiondot(float value);
  const ::google::protobuf::RepeatedField<float>& positiondot() const;
  ::google::protobuf::RepeatedField<float>* mutable_positiondot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_positiondot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_positiondot();

  public:
  // repeated uint32 matrixSize = 4 [packed = true];
  int matrixsize_size() const;
  private:
  int _internal_matrixsize_size() const;

  public:
  void clear_matrixsize() ;
  ::uint32_t matrixsize(int index) const;
  void set_matrixsize(int index, ::uint32_t value);
  void add_matrixsize(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& matrixsize() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_matrixsize();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_matrixsize() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_matrixsize();

  public:
  // repeated float rotMatrix = 5 [packed = true];
  int rotmatrix_size() const;
  private:
  int _internal_rotmatrix_size() const;

  public:
  void clear_rotmatrix() ;
  float rotmatrix(int index) const;
  void set_rotmatrix(int index, float value);
  void add_rotmatrix(float value);
  const ::google::protobuf::RepeatedField<float>& rotmatrix() const;
  ::google::protobuf::RepeatedField<float>* mutable_rotmatrix();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_rotmatrix() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_rotmatrix();

  public:
  // repeated float rotMatrixDot = 6 [packed = true];
  int rotmatrixdot_size() const;
  private:
  int _internal_rotmatrixdot_size() const;

  public:
  void clear_rotmatrixdot() ;
  float rotmatrixdot(int index) const;
  void set_rotmatrixdot(int index, float value);
  void add_rotmatrixdot(float value);
  const ::google::protobuf::RepeatedField<float>& rotmatrixdot() const;
  ::google::protobuf::RepeatedField<float>* mutable_rotmatrixdot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_rotmatrixdot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_rotmatrixdot();

  public:
  // .dronePosVec.dataDevices deviceType = 1;
  void clear_devicetype() ;
  ::dronePosVec::dataDevices devicetype() const;
  void set_devicetype(::dronePosVec::dataDevices value);

  private:
  ::dronePosVec::dataDevices _internal_devicetype() const;
  void _internal_set_devicetype(::dronePosVec::dataDevices value);

  public:
  // @@protoc_insertion_point(class_scope:dronePosVec.dronePosition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> position_;
    ::google::protobuf::RepeatedField<float> positiondot_;
    ::google::protobuf::RepeatedField<::uint32_t> matrixsize_;
    mutable ::google::protobuf::internal::CachedSize _matrixsize_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> rotmatrix_;
    ::google::protobuf::RepeatedField<float> rotmatrixdot_;
    int devicetype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dronePosVec_2eproto;
};
// -------------------------------------------------------------------

class droneControl final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dronePosVec.droneControl) */ {
 public:
  inline droneControl() : droneControl(nullptr) {}
  ~droneControl() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR droneControl(
      ::google::protobuf::internal::ConstantInitialized);

  inline droneControl(const droneControl& from) : droneControl(nullptr, from) {}
  inline droneControl(droneControl&& from) noexcept
      : droneControl(nullptr, std::move(from)) {}
  inline droneControl& operator=(const droneControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline droneControl& operator=(droneControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const droneControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const droneControl* internal_default_instance() {
    return reinterpret_cast<const droneControl*>(
        &_droneControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(droneControl& a, droneControl& b) { a.Swap(&b); }
  inline void Swap(droneControl* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(droneControl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  droneControl* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<droneControl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const droneControl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const droneControl& from) { droneControl::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(droneControl* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dronePosVec.droneControl"; }

 protected:
  explicit droneControl(::google::protobuf::Arena* arena);
  droneControl(::google::protobuf::Arena* arena, const droneControl& from);
  droneControl(::google::protobuf::Arena* arena, droneControl&& from) noexcept
      : droneControl(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMotorFLFieldNumber = 1,
    kMotorFRFieldNumber = 2,
    kMotorBLFieldNumber = 3,
    kMotorBRFieldNumber = 4,
  };
  // float motorFL = 1;
  void clear_motorfl() ;
  float motorfl() const;
  void set_motorfl(float value);

  private:
  float _internal_motorfl() const;
  void _internal_set_motorfl(float value);

  public:
  // float motorFR = 2;
  void clear_motorfr() ;
  float motorfr() const;
  void set_motorfr(float value);

  private:
  float _internal_motorfr() const;
  void _internal_set_motorfr(float value);

  public:
  // float motorBL = 3;
  void clear_motorbl() ;
  float motorbl() const;
  void set_motorbl(float value);

  private:
  float _internal_motorbl() const;
  void _internal_set_motorbl(float value);

  public:
  // float motorBR = 4;
  void clear_motorbr() ;
  float motorbr() const;
  void set_motorbr(float value);

  private:
  float _internal_motorbr() const;
  void _internal_set_motorbr(float value);

  public:
  // @@protoc_insertion_point(class_scope:dronePosVec.droneControl)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float motorfl_;
    float motorfr_;
    float motorbl_;
    float motorbr_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dronePosVec_2eproto;
};
// -------------------------------------------------------------------

class dataTransfers final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dronePosVec.dataTransfers) */ {
 public:
  inline dataTransfers() : dataTransfers(nullptr) {}
  ~dataTransfers() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR dataTransfers(
      ::google::protobuf::internal::ConstantInitialized);

  inline dataTransfers(const dataTransfers& from) : dataTransfers(nullptr, from) {}
  inline dataTransfers(dataTransfers&& from) noexcept
      : dataTransfers(nullptr, std::move(from)) {}
  inline dataTransfers& operator=(const dataTransfers& from) {
    CopyFrom(from);
    return *this;
  }
  inline dataTransfers& operator=(dataTransfers&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dataTransfers& default_instance() {
    return *internal_default_instance();
  }
  static inline const dataTransfers* internal_default_instance() {
    return reinterpret_cast<const dataTransfers*>(
        &_dataTransfers_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(dataTransfers& a, dataTransfers& b) { a.Swap(&b); }
  inline void Swap(dataTransfers* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dataTransfers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dataTransfers* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<dataTransfers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const dataTransfers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const dataTransfers& from) { dataTransfers::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(dataTransfers* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "dronePosVec.dataTransfers"; }

 protected:
  explicit dataTransfers(::google::protobuf::Arena* arena);
  dataTransfers(::google::protobuf::Arena* arena, const dataTransfers& from);
  dataTransfers(::google::protobuf::Arena* arena, dataTransfers&& from) noexcept
      : dataTransfers(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 4,
    kIPFieldNumber = 6,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTimeSyncNsFieldNumber = 5,
    kPortFieldNumber = 7,
  };
  // string msg = 4;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // string IP = 6;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // int32 ID = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .dronePosVec.transferType type = 3;
  void clear_type() ;
  ::dronePosVec::transferType type() const;
  void set_type(::dronePosVec::transferType value);

  private:
  ::dronePosVec::transferType _internal_type() const;
  void _internal_set_type(::dronePosVec::transferType value);

  public:
  // int64 timeSync_ns = 5;
  void clear_timesync_ns() ;
  ::int64_t timesync_ns() const;
  void set_timesync_ns(::int64_t value);

  private:
  ::int64_t _internal_timesync_ns() const;
  void _internal_set_timesync_ns(::int64_t value);

  public:
  // uint32 port = 7;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dronePosVec.dataTransfers)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::int32_t id_;
    int type_;
    ::int64_t timesync_ns_;
    ::uint32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dronePosVec_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// dronePosition

// .dronePosVec.dataDevices deviceType = 1;
inline void dronePosition::clear_devicetype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.devicetype_ = 0;
}
inline ::dronePosVec::dataDevices dronePosition::devicetype() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.deviceType)
  return _internal_devicetype();
}
inline void dronePosition::set_devicetype(::dronePosVec::dataDevices value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.deviceType)
}
inline ::dronePosVec::dataDevices dronePosition::_internal_devicetype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dronePosVec::dataDevices>(_impl_.devicetype_);
}
inline void dronePosition::_internal_set_devicetype(::dronePosVec::dataDevices value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.devicetype_ = value;
}

// repeated float position = 2 [packed = true];
inline int dronePosition::_internal_position_size() const {
  return _internal_position().size();
}
inline int dronePosition::position_size() const {
  return _internal_position_size();
}
inline void dronePosition::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_.Clear();
}
inline float dronePosition::position(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.position)
  return _internal_position().Get(index);
}
inline void dronePosition::set_position(int index, float value) {
  _internal_mutable_position()->Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.position)
}
inline void dronePosition::add_position(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_position()->Add(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.position)
}
inline const ::google::protobuf::RepeatedField<float>& dronePosition::position() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.position)
  return _internal_position();
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::mutable_position()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_position();
}
inline const ::google::protobuf::RepeatedField<float>&
dronePosition::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_;
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::_internal_mutable_position() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.position_;
}

// repeated float positionDot = 3 [packed = true];
inline int dronePosition::_internal_positiondot_size() const {
  return _internal_positiondot().size();
}
inline int dronePosition::positiondot_size() const {
  return _internal_positiondot_size();
}
inline void dronePosition::clear_positiondot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.positiondot_.Clear();
}
inline float dronePosition::positiondot(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.positionDot)
  return _internal_positiondot().Get(index);
}
inline void dronePosition::set_positiondot(int index, float value) {
  _internal_mutable_positiondot()->Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.positionDot)
}
inline void dronePosition::add_positiondot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_positiondot()->Add(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.positionDot)
}
inline const ::google::protobuf::RepeatedField<float>& dronePosition::positiondot() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.positionDot)
  return _internal_positiondot();
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::mutable_positiondot()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.positionDot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_positiondot();
}
inline const ::google::protobuf::RepeatedField<float>&
dronePosition::_internal_positiondot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.positiondot_;
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::_internal_mutable_positiondot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.positiondot_;
}

// repeated uint32 matrixSize = 4 [packed = true];
inline int dronePosition::_internal_matrixsize_size() const {
  return _internal_matrixsize().size();
}
inline int dronePosition::matrixsize_size() const {
  return _internal_matrixsize_size();
}
inline void dronePosition::clear_matrixsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.matrixsize_.Clear();
}
inline ::uint32_t dronePosition::matrixsize(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.matrixSize)
  return _internal_matrixsize().Get(index);
}
inline void dronePosition::set_matrixsize(int index, ::uint32_t value) {
  _internal_mutable_matrixsize()->Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.matrixSize)
}
inline void dronePosition::add_matrixsize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_matrixsize()->Add(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.matrixSize)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& dronePosition::matrixsize() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.matrixSize)
  return _internal_matrixsize();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* dronePosition::mutable_matrixsize()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.matrixSize)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_matrixsize();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
dronePosition::_internal_matrixsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.matrixsize_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* dronePosition::_internal_mutable_matrixsize() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.matrixsize_;
}

// repeated float rotMatrix = 5 [packed = true];
inline int dronePosition::_internal_rotmatrix_size() const {
  return _internal_rotmatrix().size();
}
inline int dronePosition::rotmatrix_size() const {
  return _internal_rotmatrix_size();
}
inline void dronePosition::clear_rotmatrix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotmatrix_.Clear();
}
inline float dronePosition::rotmatrix(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.rotMatrix)
  return _internal_rotmatrix().Get(index);
}
inline void dronePosition::set_rotmatrix(int index, float value) {
  _internal_mutable_rotmatrix()->Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.rotMatrix)
}
inline void dronePosition::add_rotmatrix(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_rotmatrix()->Add(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.rotMatrix)
}
inline const ::google::protobuf::RepeatedField<float>& dronePosition::rotmatrix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.rotMatrix)
  return _internal_rotmatrix();
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::mutable_rotmatrix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.rotMatrix)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rotmatrix();
}
inline const ::google::protobuf::RepeatedField<float>&
dronePosition::_internal_rotmatrix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotmatrix_;
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::_internal_mutable_rotmatrix() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rotmatrix_;
}

// repeated float rotMatrixDot = 6 [packed = true];
inline int dronePosition::_internal_rotmatrixdot_size() const {
  return _internal_rotmatrixdot().size();
}
inline int dronePosition::rotmatrixdot_size() const {
  return _internal_rotmatrixdot_size();
}
inline void dronePosition::clear_rotmatrixdot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotmatrixdot_.Clear();
}
inline float dronePosition::rotmatrixdot(int index) const {
  // @@protoc_insertion_point(field_get:dronePosVec.dronePosition.rotMatrixDot)
  return _internal_rotmatrixdot().Get(index);
}
inline void dronePosition::set_rotmatrixdot(int index, float value) {
  _internal_mutable_rotmatrixdot()->Set(index, value);
  // @@protoc_insertion_point(field_set:dronePosVec.dronePosition.rotMatrixDot)
}
inline void dronePosition::add_rotmatrixdot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_rotmatrixdot()->Add(value);
  // @@protoc_insertion_point(field_add:dronePosVec.dronePosition.rotMatrixDot)
}
inline const ::google::protobuf::RepeatedField<float>& dronePosition::rotmatrixdot() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dronePosVec.dronePosition.rotMatrixDot)
  return _internal_rotmatrixdot();
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::mutable_rotmatrixdot()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dronePosVec.dronePosition.rotMatrixDot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rotmatrixdot();
}
inline const ::google::protobuf::RepeatedField<float>&
dronePosition::_internal_rotmatrixdot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotmatrixdot_;
}
inline ::google::protobuf::RepeatedField<float>* dronePosition::_internal_mutable_rotmatrixdot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rotmatrixdot_;
}

// -------------------------------------------------------------------

// droneControl

// float motorFL = 1;
inline void droneControl::clear_motorfl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorfl_ = 0;
}
inline float droneControl::motorfl() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorFL)
  return _internal_motorfl();
}
inline void droneControl::set_motorfl(float value) {
  _internal_set_motorfl(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorFL)
}
inline float droneControl::_internal_motorfl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motorfl_;
}
inline void droneControl::_internal_set_motorfl(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorfl_ = value;
}

// float motorFR = 2;
inline void droneControl::clear_motorfr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorfr_ = 0;
}
inline float droneControl::motorfr() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorFR)
  return _internal_motorfr();
}
inline void droneControl::set_motorfr(float value) {
  _internal_set_motorfr(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorFR)
}
inline float droneControl::_internal_motorfr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motorfr_;
}
inline void droneControl::_internal_set_motorfr(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorfr_ = value;
}

// float motorBL = 3;
inline void droneControl::clear_motorbl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorbl_ = 0;
}
inline float droneControl::motorbl() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorBL)
  return _internal_motorbl();
}
inline void droneControl::set_motorbl(float value) {
  _internal_set_motorbl(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorBL)
}
inline float droneControl::_internal_motorbl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motorbl_;
}
inline void droneControl::_internal_set_motorbl(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorbl_ = value;
}

// float motorBR = 4;
inline void droneControl::clear_motorbr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorbr_ = 0;
}
inline float droneControl::motorbr() const {
  // @@protoc_insertion_point(field_get:dronePosVec.droneControl.motorBR)
  return _internal_motorbr();
}
inline void droneControl::set_motorbr(float value) {
  _internal_set_motorbr(value);
  // @@protoc_insertion_point(field_set:dronePosVec.droneControl.motorBR)
}
inline float droneControl::_internal_motorbr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motorbr_;
}
inline void droneControl::_internal_set_motorbr(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motorbr_ = value;
}

// -------------------------------------------------------------------

// dataTransfers

// int32 ID = 1;
inline void dataTransfers::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t dataTransfers::id() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.ID)
  return _internal_id();
}
inline void dataTransfers::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.ID)
}
inline ::int32_t dataTransfers::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void dataTransfers::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// .dronePosVec.transferType type = 3;
inline void dataTransfers::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::dronePosVec::transferType dataTransfers::type() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.type)
  return _internal_type();
}
inline void dataTransfers::set_type(::dronePosVec::transferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.type)
}
inline ::dronePosVec::transferType dataTransfers::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dronePosVec::transferType>(_impl_.type_);
}
inline void dataTransfers::_internal_set_type(::dronePosVec::transferType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// string msg = 4;
inline void dataTransfers::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& dataTransfers::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void dataTransfers::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.msg)
}
inline std::string* dataTransfers::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:dronePosVec.dataTransfers.msg)
  return _s;
}
inline const std::string& dataTransfers::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void dataTransfers::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* dataTransfers::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* dataTransfers::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dronePosVec.dataTransfers.msg)
  return _impl_.msg_.Release();
}
inline void dataTransfers::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dronePosVec.dataTransfers.msg)
}

// int64 timeSync_ns = 5;
inline void dataTransfers::clear_timesync_ns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timesync_ns_ = ::int64_t{0};
}
inline ::int64_t dataTransfers::timesync_ns() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.timeSync_ns)
  return _internal_timesync_ns();
}
inline void dataTransfers::set_timesync_ns(::int64_t value) {
  _internal_set_timesync_ns(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.timeSync_ns)
}
inline ::int64_t dataTransfers::_internal_timesync_ns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timesync_ns_;
}
inline void dataTransfers::_internal_set_timesync_ns(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timesync_ns_ = value;
}

// string IP = 6;
inline void dataTransfers::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& dataTransfers::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.IP)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void dataTransfers::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.IP)
}
inline std::string* dataTransfers::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:dronePosVec.dataTransfers.IP)
  return _s;
}
inline const std::string& dataTransfers::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void dataTransfers::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* dataTransfers::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* dataTransfers::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dronePosVec.dataTransfers.IP)
  return _impl_.ip_.Release();
}
inline void dataTransfers::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dronePosVec.dataTransfers.IP)
}

// uint32 port = 7;
inline void dataTransfers::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t dataTransfers::port() const {
  // @@protoc_insertion_point(field_get:dronePosVec.dataTransfers.port)
  return _internal_port();
}
inline void dataTransfers::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dronePosVec.dataTransfers.port)
}
inline ::uint32_t dataTransfers::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void dataTransfers::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace dronePosVec


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dronePosVec::dataDevices> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dronePosVec::dataDevices>() {
  return ::dronePosVec::dataDevices_descriptor();
}
template <>
struct is_proto_enum<::dronePosVec::transferType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dronePosVec::transferType>() {
  return ::dronePosVec::transferType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dronePosVec_2eproto_2epb_2eh
